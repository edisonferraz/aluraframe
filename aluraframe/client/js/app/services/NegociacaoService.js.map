{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n\r\n  constructor() {\r\n\r\n    this._http = new HttpService();\r\n  }\r\n\r\n  obterNegociacoesDaSemana() {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this._http.get('negociacoes/semana')\r\n        .then(negociacoes => {\r\n          resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n        })\r\n        .catch(erro => {\r\n          console.log(erro);\r\n          reject('Não foi possivel obter as negociacoes da semana');\r\n        })\r\n\r\n    });\r\n  \r\n  }\r\n\r\n  obterNegociacoesDaSemanaAnterior() {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this._http.get('negociacoes/anterior')\r\n        .then(negociacoes => {\r\n          resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n        })\r\n        .catch(erro => {\r\n          console.log(erro);\r\n          reject('Não foi possivel obter as negociacoes da semana');\r\n        })\r\n\r\n    });\r\n  \r\n  }\r\n\r\n  obterNegociacoesDaSemanaRetrasada() {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this._http.get('negociacoes/retrasada')\r\n        .then(negociacoes => {\r\n          resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n        })\r\n        .catch(erro => {\r\n          console.log(erro);\r\n          reject('Não foi possivel obter as negociacoes da semana');\r\n        })\r\n\r\n    });\r\n  \r\n  }\r\n\r\n    obterNegociacoes() {\r\n        \r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), [])\r\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\r\n\r\n            return negociacoes;\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adicionada com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel adicionar a negociação');\r\n            });\r\n    }\r\n\r\n    lista() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel obter as negociacoes');\r\n            })\r\n    }\r\n\r\n    apaga() {\r\n        \r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(mensagem => 'Negociacoes apagadas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel apagar as negociacoes');\r\n            })\r\n    }\r\n\r\n    importa(listaAtual) {\r\n\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes => \r\n                negociacoes.filter(negociacao =>\r\n                    !listaAtual.some(negociacaoExistente => \r\n                        negociacao.isEquals(negociacaoExistente)))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel buscar negociacoes para importar');\r\n            })            \r\n    }\r\n}"]}